创建本地仓库：
	初始化一个Git仓库，使git init命令。
	添加文件到Git仓库，分两步：
	 第一步，使用命令git add ，注意，可反复多次使用，添加多个文件；
	 第二步，使用命令git commit，完成。
时光穿梭机：
	 要随时掌握工作区的状态，使用git status命令。
	 如果git status告诉你有文件被修改过，使用git diff可以查看修改内容。
版本回退：
	 HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
	  使用命令git reset --hard commit_id 返回到指定提交id的版本
		  git reset --hard HEAD^  返回上一个版本
	 穿梭前，使用git log可以查看提交历史，以便确定要回退到哪个版本。
	 要重返未来，使用git reflog查看命令历史，以便确定要回到未来的哪个版本。
撤销修改：
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，
	       使用命令 git checkout -- filename。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时即使用了add命令，
	想丢弃修改，分两步，第一步使用命令git reset HEAD filename，就回到了场景1，
	第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，使用版本回退，
	不过前提是没有推送到远程库。
删除文件：
	命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远
	不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次
	提交后你修改的内容。

远程仓库：
添加远程库：
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
	关联后，使用命令git push -u origin master第一次推送master分纸支的所有内容；
	此后，每次本地提交后，如有必要，就可以使用命令git push origin master推送最新修改；
从远程库克隆：
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
	如：git clone git@github.com:michaelliao/gitskills.git
分支管理：
	查看分支：git branch
	创建分支：git branch name
	切换分支：git checkout name
	创建+切换分支：git checkout -b name
	合并某分支到当前分支：git merge name
	删除分支：git branch -d name
解决冲突：
	当Git无法自动合并分支时，就必须手动解决冲突。
	解决冲突后，再提交，合并完成。用git log --graph命令可以看到分支合并图。
分支管理策略：
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
	能看出来曾经做过合并，用fast forward合并就看不出来曾经做过合并。
	如：git merge --no-ff -m "merge with no-ff" name
Bug分支：
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，
	再git stash pop，回到工作现场。
Feature分支：
	开发一个新feature，最好新建一个分支；如果要丢弃一个没有被合并过的分支，
	可以通过git branch -D name强行删除。

多人协作：
	工作模式通常是这样：
	1. 首先，可以试图用git push origin branch-name推送自己的修改；
	2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	3. 如果合并有冲突，则解决冲突，并在本地提交；
	4. 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
	如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接
	关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。	
标签管理：
	命令git tag name用于新建一个标签，默认为HEAD，也可以指定一个commit id；
	如：git tag name commit id
	-a tagname -m "blablabla..."可以指定标签信息；
	-s tagname -m "blablabla..."可以用PGP签名标签；
	命令git tag可以查看所有标签；
	命令git push origin tagname可以推送一个本地标签；
	命令git push origin --tags可以推送全部未推送过的本地标签；
	命令git tag -d tagname可以删除一个本地标签；
	命令git push origin :refs/tags/tagname可以删除一个远程标签。
